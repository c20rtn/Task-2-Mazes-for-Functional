<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="dcda5aca-7c30-45ba-be1f-8963b381224e" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/maze_task_2.iml" beforeDir="false" afterPath="$PROJECT_DIR$/maze_task_2.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/maze_task_2/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/maze_task_2/core.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
  </component>
  <component name="ProjectId" id="1XceFvHmpIcKiUpt8lkerJjCA2L" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="node.js.detected.package.eslint" value="true" />
    <property name="node.js.detected.package.tslint" value="true" />
    <property name="node.js.path.for.package.eslint" value="project" />
    <property name="node.js.path.for.package.tslint" value="project" />
    <property name="node.js.selected.package.eslint" value="(autodetect)" />
    <property name="node.js.selected.package.tslint" value="(autodetect)" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="settings.editor.selected.configurable" value="LeiningenProject" />
  </component>
  <component name="ReplState" timestamp="1584969842706">{:repl-history {:ide [], :local [{:command &quot;(print(map ex-maze))&quot;, :offset 6, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(print %) ex-maze)&quot;, :offset 14, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(println %) ex-maze)&quot;, :offset 15, :ns &quot;maze-task-2.core&quot;} {:command &quot;(def ex-maze [[{:north 1, :east 0, :south 0, :west 0}\n               {:north 1, :east 0, :south 0, :west 0}\n               {:north 1, :east 0, :south 0, :west 0}\n               {:north 1, :east 0, :south 0, :west 0}]\n              [{:north 1, :east 0, :south 1, :west 0}\n               {:north 1, :east 0, :south 1, :west 0}\n               {:north 1, :east 0, :south 1, :west 0}\n               {:north 1, :east 0, :south 1, :west 0}]\n              [{:north 0, :east 1, :south 1, :west 0}\n               {:north 0, :east 1, :south 1, :west 1}\n               {:north 1, :east 0, :south 1, :west 1}\n               {:north 1, :east 0, :south 1, :west 0}]\n              [{:north 0, :east 1, :south 0, :west 0}\n               {:north 0, :east 1, :south 0, :west 1}\n               {:north 0, :east 1, :south 1, :west 1}\n               {:north 0, :east 0, :south 1, :west 1}]])\n\n(defn map-over [grid]\n  (map #(reduce (println-str (first %)) %)\n       ex-maze))\n\n(map-over ex-maze)&quot;, :offset 972, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defn map-over [grid]\n  (map #(reduce (println (first %)) %)\n       ex-maze))\n\n(map-over ex-maze)&quot;, :offset 97, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defn map-over [grid]\n  (map #(reduce (print %) %)\n       ex-maze))\n\n(map-over ex-maze)&quot;, :offset 87, :ns &quot;maze-task-2.core&quot;} {:command &quot;(for [row [{:north 1, :east 0, :south 0, :west 0}\n           {:north 1, :east 0, :south 0, :west 0}\n           {:north 1, :east 0, :south 0, :west 0}\n           {:north 1, :east 0, :south 0, :west 0}]]\n  {:meme 69})&quot;, :offset 215, :ns &quot;maze-task-2.core&quot;} {:command &quot;(make-a-grid 3 3 )&quot;, :offset 17, :ns &quot;maze-task-2.core&quot;} {:command &quot;(rand-int 1)&quot;, :offset 12, :ns &quot;maze-task-2.core&quot;} {:command &quot;(rand-int 2)&quot;, :offset 12, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defn map-over [grid rows cols]\n  (map\n    #(for [row %]\n       (if (= (rand-int 2) 1)\n         (update % :east 1)\n         (update % :north 1)))\n    grid))\n\n(map-over (make-a-grid 3 3) 3 3)&quot;, :offset 190, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defn map-over [grid rows cols]\n  (map\n    #(for [row %]\n       (if (= (rand-int 2) 1)\n         (update row :east 1)\n         (update row :north 1)))\n    grid))&quot;, :offset 160, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map-over (make-a-grid 3 3) 3 3)&quot;, :offset 32, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(defn map-over [grid]\n  (map\n    #(for [row %]\n       (println row))\n    grid))\n\n(map-over (make-a-grid 3 3))&quot;, :offset 110, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(defn map-over [grid]\n  (map\n    #(vec(for [row %]\n       (println row)))\n    grid))\n\n(map-over (make-a-grid 3 3))&quot;, :offset 39, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(defn map-over [grid]\n  (vec(map\n    #(vec(for [row %]\n       (println row)))\n    grid)))\n\n(map-over (make-a-grid 3 3))&quot;, :offset 29, :ns &quot;maze-task-2.core&quot;} {:command &quot;(update {:north 0, :east 0, :south 0, :west 0} :east 1)&quot;, :offset 54, :ns &quot;maze-task-2.core&quot;} {:command &quot;(update {:north 0, :east 0, :south 0, :west 0} :east inc)&quot;, :offset 56, :ns &quot;maze-task-2.core&quot;} {:command &quot;(take (rand-int 2) 50)&quot;, :offset 21, :ns &quot;maze-task-2.core&quot;} {:command &quot;(take 50 (repeat (rand-int 2)))&quot;, :offset 29, :ns &quot;maze-task-2.core&quot;} {:command &quot;(take 50 (repeat (rand-int 10)))&quot;, :offset 29, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defn map-over [grid]\n  (map\n    #(vec(for [row %]\n           (if (= (rand-int 2) 1)\n             (update row :east inc)\n             (update row :north inc))))\n    grid))\n\n(map-over (make-a-grid 3 3))&quot;, :offset 201, :ns &quot;maze-task-2.core&quot;} {:command &quot;(update {:north 1, :east 0, :south 0, :west 0} {:north 1, :east 1, :south 1, :west 0})&quot;, :offset 86, :ns &quot;maze-task-2.core&quot;} {:command &quot;(update {:north 0, :east 0, :south 0, :west 0} :north (:north{:north 1, :east 1, :south 1, :west 0}))&quot;, :offset 61, :ns &quot;maze-task-2.core&quot;} {:command &quot;(concat [] {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0})&quot;, :offset 191, :ns &quot;maze-task-2.core&quot;} {:command &quot;(concat [[]] {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0})&quot;, :offset 193, :ns &quot;maze-task-2.core&quot;} {:command &quot;(concat [] [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}])&quot;, :offset 12, :ns &quot;maze-task-2.core&quot;} {:command &quot;(concat [] [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}] [{:north 1, :east 0, :south 0, :west 0}\n                                                            {:north 1, :east 0, :south 0, :west 0}\n                                                            {:north 1, :east 0, :south 0, :west 0}\n                                                            {:north 1, :east 0, :south 0, :west 0}]\n        )&quot;, :offset 539, :ns &quot;maze-task-2.core&quot;} {:command &quot;(concat  [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}] \n        [{:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}]\n        )&quot;, :offset 8, :ns &quot;maze-task-2.core&quot;} {:command &quot;(concat  [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}] \n        (vec[{:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}])\n        )&quot;, :offset 204, :ns &quot;maze-task-2.core&quot;} {:command &quot;(cons   [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}] \n        [{:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}]\n        )&quot;, :offset 6, :ns &quot;maze-task-2.core&quot;} {:command &quot;(cons []  [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}] \n        [{:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}]\n        )&quot;, :offset 49, :ns &quot;maze-task-2.core&quot;} {:command &quot;(cons [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}] \n        [{:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}]\n        )&quot;, :offset 188, :ns &quot;maze-task-2.core&quot;} {:command &quot;(conj [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}] \n        [{:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}\n         {:north 1, :east 0, :south 0, :west 0}]\n        )&quot;, :offset 5, :ns &quot;maze-task-2.core&quot;} {:command &quot;(conj [{:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}\n        {:north 1, :east 0, :south 0, :west 0}]\n\n      [{:north 1, :east 0, :south 0, :west 0}\n       {:north 1, :east 0, :south 0, :west 0}\n       {:north 1, :east 0, :south 0, :west 0}\n       {:north 1, :east 0, :south 0, :west 0}]\n      \n      [{:north 1, :east 0, :south 0, :west 0}\n       {:north 1, :east 0, :south 0, :west 0}\n       {:north 1, :east 0, :south 0, :west 0}\n       {:north 1, :east 0, :south 0, :west 0}]\n        )&quot;, :offset 380, :ns &quot;maze-task-2.core&quot;} {:command &quot;ex-maze&quot;, :offset 7, :ns &quot;maze-task-2.core&quot;} {:command &quot;(get-in ex-maze 2 0)&quot;, :offset 19, :ns &quot;maze-task-2.core&quot;} {:command &quot;(get-in ex-maze 2\n        )&quot;, :offset 26, :ns &quot;maze-task-2.core&quot;} {:command &quot;(get-in ex-maze [2])&quot;, :offset 19, :ns &quot;maze-task-2.core&quot;} {:command &quot;(get-in ex-maze [2 1])&quot;, :offset 20, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defn make-a-row [columns]\n  (loop [count 0 row []]\n    (if (= columns count)\n      row\n      (recur (inc count) (conj row {:north 0 :east 0 :south 0 :west 0})))))\n\n(defn make-a-grid [rows columns]\n  (loop [count 0 grid []]\n    (if (= rows count)\n      grid\n      (recur (inc count) (conj grid (make-a-row columns))))))\n\n(def grid (atom (make-a-grid 4 4)))\n\n(defn make-a-cell\n  ([row] (make-a-cell row 0))\n  ([row col]\n   ; store size of grid and number of cells\n   (let [size (count @grid) cells (count (first @grid))]\n     ; above top row return maze\n     (cond\n       (= row size) @grid\n       ; top row &amp;&amp; last cell do nothing\n       (and (= row (- size 1)) (= col (- cells 1))) 0\n       ; top row carve east\n       (=  row (- size 1)) (do\n                             (swap! grid assoc-in [row col :east] 1)\n                             (swap! grid assoc-in [row (+ col 1) :west] 1))\n       ; not top row &amp;&amp; last cell carve north\n       (= col (- cells 1)) (do\n                             (swap! grid assoc-in [row col :north] 1)\n                             (swap! grid assoc-in [(+ row 1) col :south] 1))\n       ; not top row carve north or east\n       :else\n       (if (= 0 (rand-int 2))\n         (do\n           (swap! grid assoc-in [row col :east] 1)\n           (swap! grid assoc-in [row (+ col 1) :west] 1))\n         (do\n           (swap! grid assoc-in [row col :north] 1)\n           (swap! grid assoc-in [(+ row 1) col :south] 1)))))))\n\n\n(defn carve-passages\n  ([] (carve-passages 0))\n  ([row]\n   (if (= row (count @grid))\n     @grid\n     (do\n       (dotimes [col (count (first @grid))]\n         (make-a-cell row col))\n       (carve-passages (inc row))))))\n\n\n(carve-passages)\n&quot;, :offset 1688, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(def maze carve-passages)&quot;, :offset 26, :ns &quot;maze-task-2.core&quot;} {:command &quot;maze&quot;, :offset 4, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defn to-s [grid]\n  (print \&quot;+\&quot;)\n  (for [x (range 0 (count (first grid))) ]\n    (print \&quot;---+\&quot;))\n  (print \&quot;\\n\&quot;)\n  )&quot;, :offset 113, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(to-s maze)&quot;, :offset 12, :ns &quot;maze-task-2.core&quot;} {:command &quot;(defproject maze_task_2 \&quot;0.1.0-SNAPSHOT\&quot;\n            :description \&quot;FIXME: write description\&quot;\n            :url \&quot;http://example.com/FIXME\&quot;\n            :license {:name \&quot;EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0\&quot;\n                      :url \&quot;https://www.eclipse.org/legal/epl-2.0/\&quot;}\n            :dependencies [[org.clojure/clojure \&quot;1.10.0\&quot;]\n                           [com.h2database/h2 \&quot;1.4.199\&quot;]\n                           [org.clojure/java.jdbc \&quot;0.7.11\&quot;]\n                           [org.clojure/data.json \&quot;1.0.0\&quot;]]\n            :repl-options {:init-ns maze-task-2.core})&quot;, :offset 582, :ns &quot;user&quot;} {:command &quot;:dependencies [[org.clojure/clojure \&quot;1.10.0\&quot;]\n               [com.h2database/h2 \&quot;1.4.199\&quot;]\n               [org.clojure/java.jdbc \&quot;0.7.11\&quot;]\n               [org.clojure/data.json \&quot;1.0.0\&quot;]]&quot;, :offset 186, :ns &quot;user&quot;} {:command &quot;[clojure.data.json :as json]&quot;, :offset 28, :ns &quot;maze-task-2.core&quot;} {:command &quot;(:require '[clojure.java.jdbc :as jdbc]\n            '[clojure.data.json :as json])&quot;, :offset 82, :ns &quot;maze-task-2.core&quot;} {:command &quot;(:require '[clojure.java.jdbc :as jdbc]\n            )&quot;, :offset 53, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/read-str \&quot;{\\\&quot;a\\\&quot;:1,\\\&quot;b\\\&quot;:2}\&quot;\n               :key-fn keyword)&quot;, :offset 66, :ns &quot;maze-task-2.core&quot;} {:command &quot;(ns maze-task-2.core\n  (:require '[clojure.java.jdbc :as jdbc]\n            '[clojure.data.json :as json]))&quot;, :offset 106, :ns &quot;maze-task-2.core&quot;} {:command &quot;(:require [clojure.java.jdbc :as jdbc]\n  [clojure.data.json :as json])&quot;, :offset 70, :ns &quot;maze-task-2.core&quot;} {:command &quot;(:require [clojure.java.jdbc :as jdbc]\n  )&quot;, :offset 41, :ns &quot;maze-task-2.core&quot;} {:command &quot;(:require \n  \n  [clojure.data.json :as json])&quot;, :offset 13, :ns &quot;maze-task-2.core&quot;} {:command &quot;(ns maze-task-2.core\n  (:require [clojure.java.jdbc :as jdbc]\n            \n            [clojure.data.json :as json]))&quot;, :offset 74, :ns &quot;maze-task-2.core&quot;} {:command &quot;(ns maze-task-2.core\n  (:require [org.clojure/java.jdbc :as jdbc]))&quot;, :offset 67, :ns &quot;maze-task-2.core&quot;} {:command &quot;(:require [clojure.java [jdbc :as sql]])&quot;, :offset 40, :ns &quot;maze-task-2.core&quot;} {:command &quot;(ns maze-task-2.core\n  (:require [clojure.java [jdbc :as sql]]))&quot;, :offset 63, :ns &quot;maze-task-2.core&quot;} {:command &quot;(ns maze-task-2.core\n  (:require [clojure.java.jdbc :as jdbc]\n            [clojure.data.json :as json]))&quot;, :offset 104, :ns &quot;user&quot;} {:command &quot;(defn make-a-row [columns]\n  (loop [count 0 row []]\n    (if (= columns count)\n      row\n      (recur (inc count) (conj row {:north 0 :east 0 :south 0 :west 0})))))\n\n(defn make-a-grid [rows columns]\n  (loop [count 0 grid []]\n    (if (= rows count)\n      grid\n      (recur (inc count) (conj grid (make-a-row columns))))))\n\n(def grid (atom (make-a-grid 4 4)))\n\n(defn make-a-cell\n  ([row] (make-a-cell row 0))\n  ([row col]\n   ; store size of grid and number of cells\n   (let [size (count @grid) cells (count (first @grid))]\n     ; above top row return maze\n     (cond\n       (= row size) @grid\n       ; top row &amp;&amp; last cell do nothing\n       (and (= row (- size 1)) (= col (- cells 1))) 0\n       ; top row carve east\n       (=  row (- size 1)) (do\n                             (swap! grid assoc-in [row col :east] 1)\n                             (swap! grid assoc-in [row (+ col 1) :west] 1))\n       ; not top row &amp;&amp; last cell carve north\n       (= col (- cells 1)) (do\n                             (swap! grid assoc-in [row col :north] 1)\n                             (swap! grid assoc-in [(+ row 1) col :south] 1))\n       ; not top row carve north or east\n       :else\n       (if (= 0 (rand-int 2))\n         (do\n           (swap! grid assoc-in [row col :east] 1)\n           (swap! grid assoc-in [row (+ col 1) :west] 1))\n         (do\n           (swap! grid assoc-in [row col :north] 1)\n           (swap! grid assoc-in [(+ row 1) col :south] 1)))))))\n\n\n(defn carve-passages\n  ([] (carve-passages 0))\n  ([row]\n   (if (= row (count @grid))\n     @grid\n     (do\n       (dotimes [col (count (first @grid))]\n         (make-a-cell row col))\n       (carve-passages (inc row))))))&quot;, :offset 1668, :ns &quot;maze-task-2.core&quot;} {:command &quot;(carve-passages)&quot;, :offset 16, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(def maze (carve-passages))&quot;, :offset 28, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 1, :west 1}\n                :key-fn %)&quot;, :offset 245, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 1, :west 1}\n                :key-fn )&quot;, :offset 244, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 1, :west 1}\n                )&quot;, :offset 237, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(json/write-str % :key-fn) {:north 0, :east 1, :south 0, :west 0}\n     {:north 1, :east 0, :south 0, :west 1}\n     {:north 0, :east 1, :south 0, :west 0}\n     {:north 1, :east 0, :south 1, :west 1})&quot;, :offset 203, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(json/write-str % :key-fn) {{:north 0, :east 1, :south 0, :west 0}\n     {:north 1, :east 0, :south 0, :west 1}\n     {:north 0, :east 1, :south 0, :west 0}\n     {:north 1, :east 0, :south 1, :west 1}})&quot;, :offset 34, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(json/write-str % :key-fn) [{:north 0, :east 1, :south 0, :west 0}\n     {:north 1, :east 0, :south 0, :west 1}\n     {:north 0, :east 1, :south 0, :west 0}\n     {:north 1, :east 0, :south 1, :west 1}])&quot;, :offset 206, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(print %) [{:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 0, :west 1}\n                 {:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 1, :west 1}])&quot;, :offset 14, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(json/write-str % :key-fn) [{:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 0, :west 1}\n                 {:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 1, :west 1}])&quot;, :offset 242, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(println %) [{:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 0, :west 1}\n                 {:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 1, :west 1}])&quot;, :offset 14, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0} :key-fn)&quot;, :offset 54, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 1, :west 1}\n                :key-fn keyword\n                )&quot;, :offset 268, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 1, :west 1})&quot;, :offset 219, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 1, :west 1}\n                :key-fn keyword)&quot;, :offset 251, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                :key-fn keyword)&quot;, :offset 54, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 1, :west 1}\n                :key-fn)&quot;, :offset 244, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                {:north 1, :east 0, :south 0, :west 1}\n                :key-fn)&quot;, :offset 134, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str {:north 0, :east 1, :south 0, :west 0}\n                :key-fn)&quot;, :offset 79, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str [{:north 0, :east 1, :south 0, :west 0}]\n                :key-fn)&quot;, :offset 17, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(json/write-str %) [{:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 0, :west 1}\n                 {:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 1, :west 1}])&quot;, :offset 23, :ns &quot;maze-task-2.core&quot;} {:command &quot;(map #(json/write-str %) )&quot;, :offset 25} {:command &quot;(json/write-str [{:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 0, :west 1}\n                 {:north 0, :east 1, :south 0, :west 0}\n                 {:north 1, :east 0, :south 1, :west 1}])&quot;, :offset 224, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/write-str maze)&quot;, :offset 20, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/read-str(json/write-str maze))&quot;, :offset 14, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/read-str(json/write-str maze):key-fn)&quot;, :offset 42, :ns &quot;maze-task-2.core&quot;} {:command &quot;(json/read-str(json/write-str maze):key-fn keyword)&quot;, :offset 50, :ns &quot;maze-task-2.core&quot;} {:command &quot;(def maze-db {:subprotocol \&quot;h2\&quot;\n              :subname \&quot;./data/mazes\&quot;\n              :user \&quot;sa\&quot;\n              :password \&quot;\&quot;})&quot;, :offset 123, :ns &quot;maze-task-2.core&quot;} {:command &quot;(jdbc/insert! maze-db :mazes {:ID \&quot;1\&quot;\n                              :NAME \&quot;test\&quot;\n                              :MAZE (json/write-str maze)})&quot;, :offset 140, :ns &quot;maze-task-2.core&quot;} {:command &quot;(let [db-protocol \&quot;tcp\&quot;            ; \&quot;file|mem|tcp\&quot;\n      db-host     \&quot;localhost:9092\&quot; ; \&quot;path|host:port\&quot;\n      db-name     \&quot;Sample\&quot;]\n  (def db {:classname   \&quot;org.h2.Driver\&quot; ; must be in classpath\n           :subprotocol \&quot;h2\&quot;\n           :subname (str \&quot;jdbc:h2:\&quot; db-protocol \&quot;://\&quot; db-host \&quot;/\&quot; db-name)\n           ; Any additional keys are passed to the driver\n           ; as driver-specific properties.\n           :user     \&quot;sa\&quot;\n           :password \&quot;\&quot;}))\n(add-classpath \&quot;file:///V:\\\\Code\\\\Third Year\\\\Functional\\\\Task 2\\\\Mazes\\\\data\\\\h2\\\\bin\\\\h2-1.4.200.jar\&quot;)&quot;, :offset 560, :ns &quot;maze-task-2.core&quot;} {:command &quot;(let [db-protocol \&quot;tcp\&quot;            ; \&quot;file|mem|tcp\&quot;\n      db-host     \&quot;localhost:8082\&quot; ; \&quot;path|host:port\&quot;\n      db-name     \&quot;mazes\&quot;]\n  (def db {:classname   \&quot;org.h2.Driver\&quot; ; must be in classpath\n           :subprotocol \&quot;h2\&quot;\n           :subname (str \&quot;jdbc:h2:\&quot; db-protocol \&quot;://\&quot; db-host \&quot;/\&quot; db-name)\n           ; Any additional keys are passed to the driver\n           ; as driver-specific properties.\n           :user     \&quot;sa\&quot;\n           :password \&quot;\&quot;}))\n(add-classpath \&quot;file:///V:\\\\Code\\\\Third Year\\\\Functional\\\\Task 2\\\\Mazes\\\\data\\\\h2\\\\bin\\\\h2-1.4.200.jar\&quot;)&quot;, :offset 559, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(jdbc/query \n  db [\&quot;SELECT * FROM mazes\&quot;])&quot;, :offset 16, :ns &quot;maze-task-2.core&quot;} {:command &quot;\n(jdbc/query maze-db [\&quot;SELECT * FROM mazes\&quot;])&quot;, :offset 45, :ns &quot;maze-task-2.core&quot;} {:command &quot;(def maze-db {:subprotocol \&quot;h2\&quot;\n              :subname \&quot;./data/mazes\&quot;\n              :user \&quot;sa\&quot;\n              :password \&quot;\&quot;})\n(jdbc/insert! maze-db :mazes {:ID \&quot;1\&quot;\n                              :NAME \&quot;test\&quot;\n                              :MAZE (json/write-str maze)})&quot;, :offset 264, :ns &quot;maze-task-2.core&quot;} {:command &quot;(def maze-db {:classname   \&quot;org.h2.Driver\&quot;\n              :subprotocol \&quot;h2:mem\&quot;\n              :subname \&quot;./data/mazes\&quot;\n              :user \&quot;sa\&quot;\n              :password \&quot;\&quot;})\n(jdbc/insert! maze-db :mazes {:ID \&quot;1\&quot;\n                              :NAME \&quot;test\&quot;\n                              :MAZE (json/write-str maze)})&quot;, :offset 311, :ns &quot;maze-task-2.core&quot;} {:command &quot;(def maze-db {:classname   \&quot;org.h2.Driver\&quot;\n              :subprotocol \&quot;h2:mem\&quot;\n              :subname \&quot;./data/mazes\&quot;\n              :user \&quot;sa\&quot;\n              :password \&quot;\&quot;})\n(jdbc/query maze-db [\&quot;SELECT * FROM mazes\&quot;])&quot;, :offset 215, :ns &quot;maze-task-2.core&quot;} {:command &quot;(def maze-db {:classname   \&quot;org.h2.Driver\&quot;\n              :subprotocol \&quot;h2\&quot;\n              :subname \&quot;./data/mazes\&quot;\n              :user \&quot;sa\&quot;\n              :password \&quot;\&quot;})\n(jdbc/insert! maze-db :mazes {:ID \&quot;1\&quot;\n                              :NAME \&quot;test\&quot;\n                              :MAZE (json/write-str maze)})&quot;, :offset 307, :ns &quot;maze-task-2.core&quot;} {:command &quot;(:require [monger.core :as mg]\n  [clojure.data.json :as json])&quot;, :offset 62, :ns &quot;user&quot;} {:command &quot;(:require\n  [clojure.data.json :as json])&quot;, :offset 9, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.repl">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="maze_task_2" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="repl" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="maze_task_2" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="maze_task_2" />
      <setting name="path" value="$PROJECT_DIR$/src/maze_task_2/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/maze_task_2" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.core" />
      <item itemvalue="Clojure REPL.repl" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="dcda5aca-7c30-45ba-be1f-8963b381224e" name="Default Changelist" comment="" />
      <created>1581349709047</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1581349709047</updated>
      <workItem from="1581349711415" duration="1499000" />
      <workItem from="1582383384113" duration="1801000" />
      <workItem from="1583754244302" duration="18000" />
      <workItem from="1584219169407" duration="2714000" />
      <workItem from="1584265405441" duration="4094000" />
      <workItem from="1584377637814" duration="199000" />
      <workItem from="1584380670553" duration="5141000" />
      <workItem from="1584471414700" duration="9612000" />
      <workItem from="1584639632093" duration="29756000" />
      <workItem from="1584913156618" duration="7797000" />
      <workItem from="1584923691393" duration="182000" />
      <workItem from="1584923889020" duration="3308000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="COLUMN_ORDER" />
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>